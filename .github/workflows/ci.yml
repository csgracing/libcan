name: ci

on:
  push:
  pull_request:

jobs:
  cache-toolchain:
    runs-on: ubuntu-latest
    steps:
    - name: Install and cache toolchain
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential libstdc++-arm-none-eabi-newlib python3 git nodejs gcovr clang doxygen
        version: 1.0
        execute_install_scripts: true

  build:
    needs: [cache-toolchain]
    runs-on: ubuntu-latest
    
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        preset: [core, pico, linux]

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install and cache toolchain
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential libstdc++-arm-none-eabi-newlib python3 git nodejs gcovr clang doxygen
        version: 1.0
        execute_install_scripts: true
    - name: Configure
      run: cmake -B build . --preset ${{ matrix.preset }}
    - name: Build
      run: cmake --build build --parallel $(nproc)
  
  test:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - preset: "pico-test"
            target: "can_rp2040_mcp2515_test"
          - preset: "core-test"
            target: "can_core_test"

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install and cache toolchain
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential libstdc++-arm-none-eabi-newlib python3 git nodejs gcovr clang doxygen
        version: 1.0
        execute_install_scripts: true
    - name: Configure
      run: cmake -B build . --preset ${{ matrix.preset }}
    - name: Build
      run: cmake --build build --parallel $(nproc) -t ${{ matrix.target }}
    - name: Test
      run: GTEST_OUTPUT="xml:$(pwd)/test_detail.xml" cmake --build build -t ${{ matrix.target }}_coverage
    - name: Report test summary
      uses: test-summary/action@v2
      with:
        paths: "test_detail.xml"
      if: always()

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        slug: csgracing/libcan
        name: test-${{ github.run_id }}
        flags: ${{ matrix.preset }}.${{ matrix.target }}
        directory: build # search in build/ dir
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      if: ${{ !cancelled() }}

    - name: Upload test results to Codecov
      uses: codecov/test-results-action@v1
      with:
        slug: csgracing/libcan
        name: test-${{ github.run_id }}
        flags: ${{ matrix.preset }}.${{ matrix.target }}
        files: ./test_detail.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      if: ${{ !cancelled() }}


  # no code coverage
  test-fuzz:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - preset: "core-fuzz-test"
            target: "can_core_test_fuzz"

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install and cache toolchain
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential libstdc++-arm-none-eabi-newlib python3 git nodejs gcovr clang doxygen
        version: 1.0
        execute_install_scripts: true
    - name: Configure
      run: cmake -B build . --preset ${{ matrix.preset }}
    - name: Build
      run: cmake --build build --parallel $(nproc) -t ${{ matrix.target }}
    - name: Test
      run: ./build/test-bin/${{ matrix.target }} --gtest_output=xml
    - name: Report test summary
      uses: test-summary/action@v2
      with:
        paths: "test_detail.xml"
      if: always()

    - name: Upload test results to Codecov
      uses: codecov/test-results-action@v1
      with:
        slug: csgracing/libcan
        name: test-fuzz-${{ github.run_id }}
        flags: ${{ matrix.preset }}.${{ matrix.target }}
        files: ./test_detail.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      if: ${{ !cancelled() }}
